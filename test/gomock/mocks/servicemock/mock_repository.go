// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	internal "github.com/gavrl/app/internal"
	gomock "github.com/golang/mock/gomock"
)

// MockBalanceRepository is a mock of BalanceRepository interface.
type MockBalanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceRepositoryMockRecorder
}

// MockBalanceRepositoryMockRecorder is the mock recorder for MockBalanceRepository.
type MockBalanceRepositoryMockRecorder struct {
	mock *MockBalanceRepository
}

// NewMockBalanceRepository creates a new mock instance.
func NewMockBalanceRepository(ctrl *gomock.Controller) *MockBalanceRepository {
	mock := &MockBalanceRepository{ctrl: ctrl}
	mock.recorder = &MockBalanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceRepository) EXPECT() *MockBalanceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBalanceRepository) Create(customerId, amount int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", customerId, amount)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBalanceRepositoryMockRecorder) Create(customerId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBalanceRepository)(nil).Create), customerId, amount)
}

// GetByCustomerId mocks base method.
func (m *MockBalanceRepository) GetByCustomerId(customerId int) (internal.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCustomerId", customerId)
	ret0, _ := ret[0].(internal.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCustomerId indicates an expected call of GetByCustomerId.
func (mr *MockBalanceRepositoryMockRecorder) GetByCustomerId(customerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCustomerId", reflect.TypeOf((*MockBalanceRepository)(nil).GetByCustomerId), customerId)
}

// Refill mocks base method.
func (m *MockBalanceRepository) Refill(balance internal.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refill", balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refill indicates an expected call of Refill.
func (mr *MockBalanceRepositoryMockRecorder) Refill(balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refill", reflect.TypeOf((*MockBalanceRepository)(nil).Refill), balance)
}

// UpdateAmount mocks base method.
func (m *MockBalanceRepository) UpdateAmount(balance internal.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAmount", balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAmount indicates an expected call of UpdateAmount.
func (mr *MockBalanceRepositoryMockRecorder) UpdateAmount(balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAmount", reflect.TypeOf((*MockBalanceRepository)(nil).UpdateAmount), balance)
}
